<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <security:global-method-security pre-post-annotations="enabled"></security:global-method-security>

    <!-- 配置自动扫描包，扫描mvc的控制器(controller)-->
    <context:component-scan base-package="org.cl.web"/>

    <!-- 开启springMVC的注解驱动，比如@RequestParam @ResponseBody -->
    <mvc:annotation-driven></mvc:annotation-driven>

    <!-- 配置视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!--静态资源映射方式-->
    <mvc:default-servlet-handler ></mvc:default-servlet-handler>


    <!-- 配置基于XML的异常映射 -->
    <bean id="simpleMappingExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 配置异常类型和具体视图页面的对应关系 -->
        <property name="exceptionMappings">
            <props>
                <!-- key属性指定异常全类名 -->
                <!-- 标签体中写对应的视图（这个值要拼前后缀得到具体路径） -->
                <!-- 标签体中写对应的视图（这个值要拼前后缀得到具体路径） -->
                <prop key="java.lang.Exception">system-error</prop>
                <prop key="org.cl.exception.AccessForbiddenException">redirect:/admin/to/loginPage</prop>
            </props>
        </property>
    </bean>

    <!-- 配置view-controller，直接把请求地址和视图名称关联起来，不必写handler方法了 -->
    <!--
        @RequestMapping("/admin/to/login/page.html")
        public String toLoginPage(){
            return "admin-login";
        }
     -->
    <!-- 登录页面 -->
    <mvc:view-controller path="/admin/to/loginPage" view-name="admin-login"/>



    <mvc:view-controller path="/admin/to/admin-main" view-name="admin-main"/>
    <mvc:view-controller path="/admin/to/addPage" view-name="admin-add"/>

    <mvc:view-controller path="/role/to/page" view-name="role-page"/>

    <mvc:view-controller path="/menu/to/page" view-name="menu-page"/>



    <!--<mvc:view-controller path="/admin/to/main/page.html" view-name="admin-main"/>-->

    <!--注册拦截器-->
    <!--<mvc:interceptors>
        <mvc:interceptor>
            &lt;!&ndash; mvc:mapping配置要拦截的资源 &ndash;&gt;
            &lt;!&ndash; /*对应一层路径，比如：/aaa &ndash;&gt;
            &lt;!&ndash; /**对应多层路径，比如：/aaa/bbb或/aaa/bbb/ccc或/aaa/bbb/ccc/ddd &ndash;&gt;
            <mvc:mapping path="/**"/>
            &lt;!&ndash;该地址是登录页面&ndash;&gt;
            <mvc:exclude-mapping path="/admin/to/loginPage"/>
            &lt;!&ndash;该地址是登录页面的登录方法&ndash;&gt;
            <mvc:exclude-mapping path="/admin/do/login"/>
            &lt;!&ndash; 注销登录也可以不做检查&ndash;&gt;
            <mvc:exclude-mapping path="/admin/do/logout"/>
            <mvc:exclude-mapping path="/resource/**"/>
            &lt;!&ndash; 配置拦截器类 &ndash;&gt;
            <bean class="org.cl.web.interceptor.LoginInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>-->


</beans>
